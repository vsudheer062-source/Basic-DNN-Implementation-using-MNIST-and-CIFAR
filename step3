# Cell 3: Data Loader
class DatasetLoader:
    """
    A comprehensive data loader for MNIST and CIFAR-10 datasets
    """
    
    def __init__(self, dataset_name, batch_size=64, download=True):
        """
        Initialize the data loader
        
        Args:
            dataset_name (str): 'mnist' or 'cifar10'
            batch_size (int): Batch size for training
            download (bool): Whether to download the dataset
        """
        self.dataset_name = dataset_name.lower()
        self.batch_size = batch_size
        self.download = download
        
        # Define transformations for different datasets
        self.transforms = self._get_transforms()
        
        # Load datasets
        self.train_dataset, self.test_dataset = self._load_dataset()
        
        # Create data loaders
        self.train_loader = DataLoader(
            self.train_dataset, 
            batch_size=batch_size, 
            shuffle=True,
            num_workers=2
        )
        
        self.test_loader = DataLoader(
            self.test_dataset, 
            batch_size=batch_size, 
            shuffle=False,
            num_workers=2
        )
    
    def _get_transforms(self):
        """Define data transformations for different datasets"""
        if self.dataset_name == 'mnist':
            transform = transforms.Compose([
                transforms.ToTensor(),
                transforms.Normalize((0.1307,), (0.3081,))  # MNIST normalization
            ])
        elif self.dataset_name == 'cifar10':
            # More comprehensive transforms for CIFAR-10
            train_transform = transforms.Compose([
                transforms.RandomHorizontalFlip(p=0.5),
                transforms.RandomRotation(10),
                transforms.ToTensor(),
                transforms.Normalize((0.4914, 0.4822, 0.4465), (0.2023, 0.1994, 0.2010))
            ])
            
            test_transform = transforms.Compose([
                transforms.ToTensor(),
                transforms.Normalize((0.4914, 0.4822, 0.4465), (0.2023, 0.1994, 0.2010))
            ])
            
            return {'train': train_transform, 'test': test_transform}
        
        return transform
    
    def _load_dataset(self):
        """Load the specified dataset"""
        if self.dataset_name == 'mnist':
            train_dataset = torchvision.datasets.MNIST(
                root='./data', 
                train=True, 
                transform=self.transforms, 
                download=self.download
            )
            
            test_dataset = torchvision.datasets.MNIST(
                root='./data', 
                train=False, 
                transform=self.transforms, 
                download=self.download
            )
            
        elif self.dataset_name == 'cifar10':
            train_dataset = torchvision.datasets.CIFAR10(
                root='./data', 
                train=True, 
                transform=self.transforms['train'], 
                download=self.download
            )
            
            test_dataset = torchvision.datasets.CIFAR10(
                root='./data', 
                train=False, 
                transform=self.transforms['test'], 
                download=self.download
            )
        
        return train_dataset, test_dataset
    
    def get_dataset_info(self):
        """Get information about the dataset"""
        if self.dataset_name == 'mnist':
            return {
                'name': 'MNIST',
                'num_classes': 10,
                'input_shape': (1, 28, 28),
                'classes': list(range(10))
            }
        elif self.dataset_name == 'cifar10':
            return {
                'name': 'CIFAR-10',
                'num_classes': 10,
                'input_shape': (3, 32, 32),
                'classes': ['airplane', 'automobile', 'bird', 'cat', 'deer', 
                          'dog', 'frog', 'horse', 'ship', 'truck']
            }
    
    def visualize_samples(self, num_samples=16):
        """Visualize random samples from the dataset"""
        # Get a batch of training data
        dataiter = iter(self.train_loader)
        images, labels = next(dataiter)
        
        # Select random samples
        indices = torch.randperm(len(images))[:num_samples]
        sample_images = images[indices]
        sample_labels = labels[indices]
        
        # Create subplot
        fig, axes = plt.subplots(4, 4, figsize=(12, 12))
        fig.suptitle(f'{self.get_dataset_info()["name"]} Sample Images', fontsize=16)
        
        for i in range(num_samples):
            ax = axes[i // 4, i % 4]
            
            if self.dataset_name == 'mnist':
                # For MNIST (grayscale)
                img = sample_images[i].squeeze()
                ax.imshow(img, cmap='gray')
            else:
                # For CIFAR-10 (RGB)
                img = sample_images[i].permute(1, 2, 0)
                # Denormalize for visualization
                img = img * torch.tensor([0.2023, 0.1994, 0.2010]) + torch.tensor([0.4914, 0.4822, 0.4465])
                img = torch.clamp(img, 0, 1)
                ax.imshow(img)
            
            # Set title
            if self.dataset_name == 'mnist':
                ax.set_title(f'Label: {sample_labels[i].item()}')
            else:
                class_names = self.get_dataset_info()['classes']
                ax.set_title(f'{class_names[sample_labels[i].item()]}')
            
            ax.axis('off')
        
        plt.tight_layout()
        plt.show()

print("DatasetLoader class defined successfully!")
