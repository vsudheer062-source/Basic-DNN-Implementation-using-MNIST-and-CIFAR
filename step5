# Cell 5: CNN Model
class CNNModel(nn.Module):
    """
    Convolutional Neural Network for image classification
    """
    
    def __init__(self, input_channels, num_classes, input_size=32):
        """
        Initialize CNN Model
        
        Args:
            input_channels (int): Number of input channels (1 for MNIST, 3 for CIFAR-10)
            num_classes (int): Number of output classes
            input_size (int): Input image size (28 for MNIST, 32 for CIFAR-10)
        """
        super(CNNModel, self).__init__()
        
        self.input_channels = input_channels
        self.num_classes = num_classes
        self.input_size = input_size
        
        # Convolutional layers
        self.conv1 = nn.Conv2d(input_channels, 32, kernel_size=3, padding=1)
        self.bn1 = nn.BatchNorm2d(32)
        self.conv2 = nn.Conv2d(32, 64, kernel_size=3, padding=1)
        self.bn2 = nn.BatchNorm2d(64)
        self.conv3 = nn.Conv2d(64, 128, kernel_size=3, padding=1)
        self.bn3 = nn.BatchNorm2d(128)
        
        # Pooling layer
        self.pool = nn.MaxPool2d(kernel_size=2, stride=2)
        
        # Dropout
        self.dropout = nn.Dropout(0.5)
        
        # Calculate the size for fully connected layer
        self.fc_input_size = self._calculate_fc_input_size()
        
        # Fully connected layers
        self.fc1 = nn.Linear(self.fc_input_size, 512)
        self.fc2 = nn.Linear(512, 256)
        self.fc3 = nn.Linear(256, num_classes)
        
        # Initialize weights
        self._initialize_weights()
    
    def _calculate_fc_input_size(self):
        """Calculate the input size for the first fully connected layer"""
        # After 3 conv layers with pooling, the size is reduced by 2^3 = 8
        size_after_conv = self.input_size // 8
        return 128 * size_after_conv * size_after_conv
    
    def _initialize_weights(self):
        """Initialize network weights"""
        for module in self.modules():
            if isinstance(module, nn.Conv2d):
                nn.init.kaiming_normal_(module.weight, mode='fan_out', nonlinearity='relu')
                if module.bias is not None:
                    nn.init.constant_(module.bias, 0)
            elif isinstance(module, nn.BatchNorm2d):
                nn.init.constant_(module.weight, 1)
                nn.init.constant_(module.bias, 0)
            elif isinstance(module, nn.Linear):
                nn.init.normal_(module.weight, 0, 0.01)
                nn.init.constant_(module.bias, 0)
    
    def forward(self, x):
        """Forward pass through the network"""
        # First convolutional block
        x = self.pool(F.relu(self.bn1(self.conv1(x))))
        
        # Second convolutional block
        x = self.pool(F.relu(self.bn2(self.conv2(x))))
        
        # Third convolutional block
        x = self.pool(F.relu(self.bn3(self.conv3(x))))
        
        # Flatten for fully connected layers
        x = x.view(x.size(0), -1)
        
        # Fully connected layers
        x = F.relu(self.fc1(x))
        x = self.dropout(x)
        x = F.relu(self.fc2(x))
        x = self.dropout(x)
        x = self.fc3(x)
        
        return x
    
    def get_model_info(self):
        """Get information about the model architecture"""
        total_params = sum(p.numel() for p in self.parameters())
        trainable_params = sum(p.numel() for p in self.parameters() if p.requires_grad)
        
        return {
            'model_type': 'CNN',
            'input_channels': self.input_channels,
            'num_classes': self.num_classes,
            'input_size': self.input_size,
            'total_parameters': total_params,
            'trainable_parameters': trainable_params,
            'fc_input_size': self.fc_input_size
        }

print("CNNModel class defined successfully!")
